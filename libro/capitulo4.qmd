---
title: "Estructuras de Control"
author: "Alex Dannis Lipa Quispe"
---

## if-else

Una breve explicación sobre este tema es que cuando la condición dentro de un **if** sea verdadera, se ejecuta una parte del código. En cambio, si la condición es falsa, se ejecuta el código dentro de **else**.

La estructura principal es la siguiente:

``` cpp
#include <iostream>
using namespace std;
int main(){
    if(condición){
        acción  // solo entrara en esta parte del código se la condición es verdadera
    }
    else{
        acción // Este código se ejecuta si la afirmación es falsa
    }
    return 0;
}
```

Un ejemplo básico para entender aún más la condicional **if-else**.

``` cpp
#include <iostream>
using namespace std;
int main(){
    if(3>4){
        cout << "3 es mayor que 4."<<endl;
    }
    else{
        cout << "4 es mayor que 3."<< endl;
    }
    return 0;
}
```

En este ejemplo vemos que la afirmación de **3 \> 4** es falsa, por lo que se ejecuta el código que está dentro de **else**, como se muestra a continuación.

```{=latex}
\begin{tcolorbox}[custombox]
4 es mayor que 3.
\end{tcolorbox}
```

Un ejercicio muy práctico es comprobar si un número es par o impar. En este código utilizaremos el operador **mod** (%) y el código quedará de la siguiente manera:

``` cpp
#include <iostream>
using namespace std;
int main(){
    int numero;
    cout << "Digite un numero entero: ";
    cin >> numero;
    if((numero % 2) == 0){
        cout << "El numero es par."<<endl;
    }
    else{
        cout << "El numero es impar."<<endl;
    }
    return 0;
}
```

En este ejercicio solicitamos al usuario que ingrese un número entero, el cual almacenamos en una variable de tipo entero llamada **numero**.

La lógica del programa se basa en la operación módulo (`%`), que calcula el **residuo** de una división:

``` mermaid
flowchart LR
  A["Solicitar número (numero = entrada)"] --> B[numero = 4]
  B --> C{"numero % 2 == 0?"}
  C -->|Verdadero| D[Mostrar "El número es par"]
  C -->|Falso| E[Mostrar "El número es impar"]
```

Para mayor entendimiento, veamos el ejemplo de **4 % 2**, cuyo resultado es **0**, por lo que la afirmación queda así: **0 == 0**, la cual es verdadera, e imprimirá el fragmento de código que está dentro del **if**.

En cambio, si la entrada fuera 5, el cálculo sería: **(5 % 2) == 0** → **1 == 0**, que es falso, por lo que se ejecutará el código dentro del **else**.

```{=latex}
\begin{tcolorbox}[custombox]
Digite un numero entero: 4 \\
El numero es par.
\end{tcolorbox}
```

```{=latex}
\begin{tcolorbox}[custombox]
Digite un numero entero: 5 \\
El numero es impar.
\end{tcolorbox}
```

## switch-case:

De una manera fácil de entender, esta estructura verifica una serie de posibles valores. Es decir, el usuario ingresa un dato y ese dato se compara con diferentes valores.

La estructura es la siguiente:

``` cpp
#include <iostream>
using namespace std;
int main(){
    switch(valor){
        case dato1: // si el valor es igual a dato1 ejecuta la acción.
            acción
            break; /* una vez realizada la accion la palabra reservada "break" ara 
                      salir de la sentencia switch*/
        case dato2:
            acción
            break;
        case dato3:
            acción
            break;
        default:    // si ninguno de los opciones se cumple se ejecuta la accion 
            accion
            break;
    }
    return 0;
}
```

Como se ve, es fácil de entender. Un ejemplo práctico será realizar un programa que, dado un valor de entrada, indique si una persona tiene que presentar un examen, no tiene que presentarlo o que ingrese un valor válido.

El programa quedaría así:

``` cpp
#include <iostream>
using namespace std;
int main(){
    char opcion; // la opción solo podrá contener un string 'a', 'b', etc;
    cout << "Diste el examen? (s/n): "; 
    cin >> opcion; // solo podras ingresa si-> s ó no->n
    switch(opcion){
        case 's':
            cout << "Espera tu resultado."<<endl;
            break;
        case 'n':
            cout << "Dirigete al salon A3."<<endl;
            break;
        default:
            cout << "Ingresaste un valor invalido."<<endl;
            break;
    }
    return 0;
}
```

```{=latex}
\begin{tcolorbox}[custombox]
Diste el examen? (s/n): s \\
Espera tu resultado.
\end{tcolorbox}
```

Lo que hace el programa es verificar si el carácter ingresado es `'s'`. En caso de ser así, imprime **"Espera tu resultado."**.\
Si el carácter es `'n'`, imprime **"Dirígete al salón A3."**.\
Y si no es ninguno de los dos, se imprimirá **"Ingresaste un valor inválido."**.

Con tu creatividad, sé que podrás crear programas con más opciones, como por ejemplo, una calculadora que, dada una opción, haga una suma, una resta o cualquier operación que desees.

## Ternario:

El operador ternario es parecido al **if-else**, pero de manera resumida. Tiene esta estructura:

``` cpp
#include <iostream>
using namespace std;
int main(){
    (condicion) ? accion(si es verdadera) : acción si es falsa;
    return 0;
}
```

Si la condición es verdadera, se ejecuta el código que está después de **`?`**.\
Si la condición es falsa, se ejecuta el código que está después de **`:`**.

Ejemplo:

``` cpp
#include <iostream>
using namespace std;
int main(){
    int a=5, b=6;
    int resultado; 
    resultado = (a>b) ? a:b;
    cout << "El numero mayor es: " << resultado<<endl;
    return 0;
}
```

Primeramente, declaramos 3 variables enteras como se muestra. Ojo, el operador ternario retorna un valor de acuerdo a sus parámetros, que en este caso son **a** y **b**.

Primeramente compara los valores de la siguiente manera: `(a > b)?` — esta operación es como `5 > 6`, esta condición es falsa, por lo que retorna el código que está del lado derecho de `:` que es la **b**, dando como resultado:

```{=latex}
\begin{tcolorbox}[custombox]
El numero mayor es: 6
\end{tcolorbox}
```

Puedes probrar de diferente manera, como en este otro ejemplo:

``` cpp
#include <iostream>
using namespace std;

int main() {
    int a = 10, b = 20;
    string resultado;
    // Operador ternario
    resultado = (a > b) ? "Mayor." : "Menor o igual.";
    cout << resultado << endl;
    return 0;
}
```

En este caso retornamos una cadena de caracteres y, como sabemos, para poder guardar cadenas usamos la palabra reservada **string** seguida del nombre de la variable.

Como vemos en la salida, dará **Menor o igual**, porque el valor de **a** es menor que el valor de la variable **b**.

```{=latex}
\begin{tcolorbox}[custombox]
Menor o igual.
\end{tcolorbox}
```

Puedes hacer una serie de ejercicios para tener más familiarización con las estructuras de control, para poder así desarrollar tu lógica de programación.
