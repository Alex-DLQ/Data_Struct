---
title: "Funciones"
author: "Alex Dannis Lipa Quispe"
---

En pocas palabras, las funciones consisten en dividir tareas para que el programa sea más legible. Como buena práctica de programación, es fundamental aprenderlas. Para ello, veremos una estructura básica:

```{=latex}
\begin{tcolorbox}[custombox]
\begin{verbatim}
En el tipo de la función, si se requiere retornar un tipo de valor en espesífico 
puedes
usar (int, float, bool) que son las más comunes.

Existen funciones que no retornan nada y el más comun es el "void".

La manera en la que creamos la funcion puede y no puede tener valores es decir:
int sumar(int n, int m) //En este caso la función recebe dos parámetros de tipo 
                        //entero.
void pedir() // Y en esta otra la función no recibe parámetros.
\end{verbatim}
\end{tcolorbox}
```

Si te das cuenta, en este libro verás que mayormente utilizamos funciones de tipo `void` para pedir datos en nuestros programas, mientras que usaremos otros tipos de funciones cuando necesitemos realizar una tarea específica que devuelva un valor.

Recuerda que en los parámetros puedes usar el nombre que tú quieras, pero debes tener en cuenta que es muy importante especificar correctamente el tipo de valor que tomará.

Una buena práctica de programación es prototipar las funciones. Esto significa declarar cómo serán antes del `main`, y luego, después de la función principal, escribimos el código que realiza esa tarea específica.

Ahora, vamos a crear un programa sencillo que retorne la suma de dos números enteros.

``` cpp
#include <iostream>
using namespace std;

int suma(int, int); // este será nuestro prototipo de nueestra función 

int main(){
    int num1, num2;
    int resultado; // como la funcion retorna un valor, ese valor lo guardamos en
                  // esta variables.
    cout << "Digite el primer numero: ";
    cin >> num1;
    cout << "Digite el segundo numero: ";
    cin >> num2;
    
    resultado = suma(num1, num2); // llamamos a la funcion poniendo el nombre de la 
                                  // funcion seguida de los dos parámetros.
    cout << "El resultado es: "<<resultado<<endl; // finalmente lo imrpimimos
    return 0;
}
//realizamos el cuerpo de la funcion.
int suma(int a, int b){ // a y b son variables.
    int resultado;
    resultado = a + b;
    return resultado;   // la palabra "return" es como decir vota el resultado.
}
```

El programa es básico, ya que solo realiza una suma simple, pero para programas más grandes es **fundamental hacerlo con funciones**, y en todo caso, es necesario que lo aprendas como una buena práctica.

## Paso de Parámetros

Para pasar arreglos, matrices o cadenas de texto, se requiere de otro tipo de parámetros que son:

```{=latex}
\begin{tcolorbox}[custombox]
\begin{verbatim}
int arreglo(int a[], int tamanio);
//El a[] es para pasar el arreglo y para saber la cantidad ponemos el "tamanio".

int matriz(int a[][100], int filas, int columnas);
//En este caso en necesario poner el tamaño máximo de columnas, seguida del total
// de filas y columnas

int cadenas(string nombre);
// para mandar de parámetro cadenas de texto.

int caracteres(char n);
//para poder mandar vocales y carácteres únicos.
\end{verbatim}
\end{tcolorbox}
```

Como ves, estos son los parámetros que debes aprender. Pero para hacerlo más interesante, vamos a crear un programa que realice una serie de opciones. Lo haremos `solo con funciones` para que así puedas `reforzar tu conocimiento` y familiarizarte más con su uso.

Las opciones que habrá en el `MENU` serán las siguientes:

```{=latex}
\begin{tcolorbox}
\begin{verbatim}
------------->MENU<-------------
1. OPERACIONES ARITMÉTICAS.
2. OPERACIONES CON ARREGLOS.
3. OPERACIONES CON MATRICES.
4. JUEGO DE "ADIVINA EL NUMERO".
5. SALIR.
\end{verbatim}
\end{tcolorbox}
```

Cabe recalcar que cada tema será explicado de una manera casi profesional, porque yo también tengo mucho que aprender. Sin embargo, el motivo por el cual hago esto es para que no tengas complicaciones futuras y logres entender todo de la mejor manera posible. Haciendo esto, aprenderás conceptos fundamentales que te servirán mucho más adelante.

## Programa N.º 1

Para poder realizar este programa, es fundamental retroceder y repasar los temas anteriores con atención. Esto te ayudará a que luego te sea mucho más fácil entender este pequeño programa.
