{"title":"Arreglos o Vectores","markdown":{"yaml":{"title":"Arreglos o Vectores","author":"Alex Dannis Lipa Quispe"},"headingText":"Vectores:","containsRefs":false,"markdown":"\n\nUn **arreglo** (también llamado **vector** en programación básica) es una **estructura de datos** que permite almacenar múltiples valores **del mismo tipo** en una sola variable.\n\nCada valor dentro del arreglo se guarda en una **posición o índice**, comenzando desde el **índice 0**.\n\nLos arreglos son útiles cuando se necesita **manejar colecciones de datos**, como listas de números, nombres o resultados, sin tener que declarar muchas variables por separado.\n\n\nComo se mencionó anteriormente, los vectores almacenan una cantidad de valores de un solo tipo. A continuación, se muestran sus partes y un par de ejemplos:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\n// se tiene el tipo de dato entero -> int arreglo[5] es necesario que\ntenga los corchetes y la cantidad de valores que vamos a utilizar.\n    \n    int arreglo[5] = {1,2,3,4,5}; \n    \n// en este ejemplo lo asignamos de manera directa en el código.\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nPara poder mostrar el contenido de un arreglo puedes hacerlo con diferentes tipos de bucles, pero generalmente se utiliza el bucle **for**. Vamos a mostrar el código completo para mostrar el contenido del arreglo:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int arreglo[5] = {1,2,3,4,5};\n    for(int i=0; i<5; i++){\n        cout << arreglo[i]<<\" \";\n    }\n    return 0;\n}\n```\n\nRecordemos lo siguiente: los arreglos tienen índices que inician desde 0, que en este caso sería:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\n    tipo nombre[cantidad]      valores \n    int     arreglo[5]     = {1, 2, 3, 4, 5};\n              \n    Los índices son ->        0, 1, 2, 3, 4\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nEntonces, lo que recorre el bucle son los índices del vector, que en el ejemplo tiene el nombre **arreglo**. Ahora mostraremos la salida estándar:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\n1 2 3 4 5\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nHagamos un ejercicio de entrada y salida de arreglos de tipo entero (`int`):\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int arreglo[5];\n    cout<<\"Digite 5 numeros: \";\n    for(int i=0; i<5; i++){\n        cin>>arreglo[i];\n    }\n    cout<<\"Mostrando el arreglo.\"<<endl;\n    for(int i=0; i<5; i++){\n        cout<<arreglo[i]<<\" \";\n    }\n    return 0;\n}\n```\n\nLo que hicimos primeramente es asignar un arreglo, como en este caso -\\> **int arreglo\\[5\\]**, que almacenará 5 valores enteros de tipo `int`.\\\nEsta será la compilación exacta del código:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nDigite 5 numeros: 1 2 3 4 5\nMostrando el arreglo.\n1 2 3 4 5\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nComo se puede observar, es una manera fácil de guardar datos y mostrarlos en un arreglo.\\\nTe invito a que practiques y desarrolles tu lógica de programación de manera constante.\n\n## Matrices:\n\nLa matriz es una estructura de datos en un plano bidimensional que tiene filas y columnas.\\\nComo en los arreglos, las matrices empiezan por los índices \\[0\\]\\[0\\].\\\nPara formar una matriz necesitamos bucles anidados. ¿Qué son? Son bucles dentro de otros, como en este ejemplo:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\n    for(int i=0; i<3; i++){\n        for(int j=0; j<3; j++){\n            cout<<[i][j]<< \" \";\n        }\n        cout << endl;\n    }\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nEsta es la manera en la que se imprime una matriz de tipo 3 por 3.\\\nComo se puede observar, tenemos dos bucles **for**, uno dentro del otro.\\\nPara guardar e imprimir los datos, se hace de esta manera:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int matriz[3][3];\n    cout << \"Digite un valor para la pariz: \"<<endl;\n    for(int i=0; i<3; i++){\n        for(int j=0; j<3; j++){\n            cout << \"[\"<<i<<\"][\"<<j<<\"]: \";\n            cin >> matriz[i][j];\n        }\n    }\n    cout << \"Mostrando la matriz.\"<<endl;\n    for(int i=0; i<3; i++){\n        for(int j=0; j<3; j++){\n            cout << matriz[i][j] <<\" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n```\n\nBien, en este pequeño ejercicio declaramos una matriz de tipo 3 por 3, guardamos los datos y los mostramos en pantalla.\\\nEl ejemplo nos quedará de la siguiente manera:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nDigite un valor para la pariz:\n[0][0]: 1\n[0][1]: 2\n[0][2]: 3\n[1][0]: 4\n[1][1]: 5\n[1][2]: 6\n[2][0]: 7\n[2][1]: 8\n[2][2]: 9\nMostrando la matriz.\n1 2 3\n4 5 6\n7 8 9\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nEsta es la manera en la que debes guardar los datos en la matriz y mostrarlos.\n","srcMarkdownNoYaml":"\n\nUn **arreglo** (también llamado **vector** en programación básica) es una **estructura de datos** que permite almacenar múltiples valores **del mismo tipo** en una sola variable.\n\nCada valor dentro del arreglo se guarda en una **posición o índice**, comenzando desde el **índice 0**.\n\nLos arreglos son útiles cuando se necesita **manejar colecciones de datos**, como listas de números, nombres o resultados, sin tener que declarar muchas variables por separado.\n\n## Vectores:\n\nComo se mencionó anteriormente, los vectores almacenan una cantidad de valores de un solo tipo. A continuación, se muestran sus partes y un par de ejemplos:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\n// se tiene el tipo de dato entero -> int arreglo[5] es necesario que\ntenga los corchetes y la cantidad de valores que vamos a utilizar.\n    \n    int arreglo[5] = {1,2,3,4,5}; \n    \n// en este ejemplo lo asignamos de manera directa en el código.\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nPara poder mostrar el contenido de un arreglo puedes hacerlo con diferentes tipos de bucles, pero generalmente se utiliza el bucle **for**. Vamos a mostrar el código completo para mostrar el contenido del arreglo:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int arreglo[5] = {1,2,3,4,5};\n    for(int i=0; i<5; i++){\n        cout << arreglo[i]<<\" \";\n    }\n    return 0;\n}\n```\n\nRecordemos lo siguiente: los arreglos tienen índices que inician desde 0, que en este caso sería:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\n    tipo nombre[cantidad]      valores \n    int     arreglo[5]     = {1, 2, 3, 4, 5};\n              \n    Los índices son ->        0, 1, 2, 3, 4\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nEntonces, lo que recorre el bucle son los índices del vector, que en el ejemplo tiene el nombre **arreglo**. Ahora mostraremos la salida estándar:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\n1 2 3 4 5\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nHagamos un ejercicio de entrada y salida de arreglos de tipo entero (`int`):\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int arreglo[5];\n    cout<<\"Digite 5 numeros: \";\n    for(int i=0; i<5; i++){\n        cin>>arreglo[i];\n    }\n    cout<<\"Mostrando el arreglo.\"<<endl;\n    for(int i=0; i<5; i++){\n        cout<<arreglo[i]<<\" \";\n    }\n    return 0;\n}\n```\n\nLo que hicimos primeramente es asignar un arreglo, como en este caso -\\> **int arreglo\\[5\\]**, que almacenará 5 valores enteros de tipo `int`.\\\nEsta será la compilación exacta del código:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nDigite 5 numeros: 1 2 3 4 5\nMostrando el arreglo.\n1 2 3 4 5\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nComo se puede observar, es una manera fácil de guardar datos y mostrarlos en un arreglo.\\\nTe invito a que practiques y desarrolles tu lógica de programación de manera constante.\n\n## Matrices:\n\nLa matriz es una estructura de datos en un plano bidimensional que tiene filas y columnas.\\\nComo en los arreglos, las matrices empiezan por los índices \\[0\\]\\[0\\].\\\nPara formar una matriz necesitamos bucles anidados. ¿Qué son? Son bucles dentro de otros, como en este ejemplo:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\n    for(int i=0; i<3; i++){\n        for(int j=0; j<3; j++){\n            cout<<[i][j]<< \" \";\n        }\n        cout << endl;\n    }\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nEsta es la manera en la que se imprime una matriz de tipo 3 por 3.\\\nComo se puede observar, tenemos dos bucles **for**, uno dentro del otro.\\\nPara guardar e imprimir los datos, se hace de esta manera:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int matriz[3][3];\n    cout << \"Digite un valor para la pariz: \"<<endl;\n    for(int i=0; i<3; i++){\n        for(int j=0; j<3; j++){\n            cout << \"[\"<<i<<\"][\"<<j<<\"]: \";\n            cin >> matriz[i][j];\n        }\n    }\n    cout << \"Mostrando la matriz.\"<<endl;\n    for(int i=0; i<3; i++){\n        for(int j=0; j<3; j++){\n            cout << matriz[i][j] <<\" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n```\n\nBien, en este pequeño ejercicio declaramos una matriz de tipo 3 por 3, guardamos los datos y los mostramos en pantalla.\\\nEl ejemplo nos quedará de la siguiente manera:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nDigite un valor para la pariz:\n[0][0]: 1\n[0][1]: 2\n[0][2]: 3\n[1][0]: 4\n[1][1]: 5\n[1][2]: 6\n[2][0]: 7\n[2][1]: 8\n[2][2]: 9\nMostrando la matriz.\n1 2 3\n4 5 6\n7 8 9\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nEsta es la manera en la que debes guardar los datos en la matriz y mostrarlos.\n"},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":["preambulo.tex"],"output-file":"capitulo6.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"papersize":"a4","fontsize":"11pt","linestretch":1.3,"margin-left":"2cm","margin-right":"2cm","margin-top":"2cm","margin-bottom":"2cm","code-block-bg":true,"code-block-border-left":"#3C3C3C","code-block-font-size":"90%","title":"Arreglos o Vectores","author":"Alex Dannis Lipa Quispe"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["pdf"]}