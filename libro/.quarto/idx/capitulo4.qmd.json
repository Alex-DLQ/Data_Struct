{"title":"Estructuras de Control","markdown":{"yaml":{"title":"Estructuras de Control","author":"Alex Dannis Lipa Quispe"},"headingText":"if-else","containsRefs":false,"markdown":"\n\n\nUna breve explicación sobre este tema es que cuando la condición dentro de un **if** sea verdadera, se ejecuta una parte del código. En cambio, si la condición es falsa, se ejecuta el código dentro de **else**.\n\nLa estructura principal es la siguiente:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    if(condición){\n        acción  // solo entrara en esta parte del código se la condición es verdadera\n    }\n    else{\n        acción // Este código se ejecuta si la afirmación es falsa\n    }\n    return 0;\n}\n```\n\nUn ejemplo básico para entender aún más la condicional **if-else**.\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    if(3>4){\n        cout << \"3 es mayor que 4.\"<<endl;\n    }\n    else{\n        cout << \"4 es mayor que 3.\"<< endl;\n    }\n    return 0;\n}\n```\n\nEn este ejemplo vemos que la afirmación de **3 \\> 4** es falsa, por lo que se ejecuta el código que está dentro de **else**, como se muestra a continuación.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n4 es mayor que 3.\n\\end{tcolorbox}\n```\n\nUn ejercicio muy práctico es comprobar si un número es par o impar. En este código utilizaremos el operador **mod** (%) y el código quedará de la siguiente manera:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int numero;\n    cout << \"Digite un numero entero: \";\n    cin >> numero;\n    if((numero % 2) == 0){\n        cout << \"El numero es par.\"<<endl;\n    }\n    else{\n        cout << \"El numero es impar.\"<<endl;\n    }\n    return 0;\n}\n```\n\nEn este ejercicio solicitamos al usuario que ingrese un número entero, el cual almacenamos en una variable de tipo entero llamada **numero**.\n\nLa lógica del programa se basa en la operación módulo (`%`), que calcula el **residuo** de una división:\n\n``` mermaid\nflowchart LR\n  A[\"Solicitar número (numero = entrada)\"] --> B[numero = 4]\n  B --> C{\"numero % 2 == 0?\"}\n  C -->|Verdadero| D[Mostrar \"El número es par\"]\n  C -->|Falso| E[Mostrar \"El número es impar\"]\n```\n\nPara mayor entendimiento, veamos el ejemplo de **4 % 2**, cuyo resultado es **0**, por lo que la afirmación queda así: **0 == 0**, la cual es verdadera, e imprimirá el fragmento de código que está dentro del **if**.\n\nEn cambio, si la entrada fuera 5, el cálculo sería: **(5 % 2) == 0** → **1 == 0**, que es falso, por lo que se ejecutará el código dentro del **else**.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nDigite un numero entero: 4 \\\\\nEl numero es par.\n\\end{tcolorbox}\n```\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nDigite un numero entero: 5 \\\\\nEl numero es impar.\n\\end{tcolorbox}\n```\n\n## switch-case:\n\nDe una manera fácil de entender, esta estructura verifica una serie de posibles valores. Es decir, el usuario ingresa un dato y ese dato se compara con diferentes valores.\n\nLa estructura es la siguiente:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    switch(valor){\n        case dato1: // si el valor es igual a dato1 ejecuta la acción.\n            acción\n            break; /* una vez realizada la accion la palabra reservada \"break\" ara \n                      salir de la sentencia switch*/\n        case dato2:\n            acción\n            break;\n        case dato3:\n            acción\n            break;\n        default:    // si ninguno de los opciones se cumple se ejecuta la accion \n            accion\n            break;\n    }\n    return 0;\n}\n```\n\nComo se ve, es fácil de entender. Un ejemplo práctico será realizar un programa que, dado un valor de entrada, indique si una persona tiene que presentar un examen, no tiene que presentarlo o que ingrese un valor válido.\n\nEl programa quedaría así:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    char opcion; // la opción solo podrá contener un string 'a', 'b', etc;\n    cout << \"Diste el examen? (s/n): \"; \n    cin >> opcion; // solo podras ingresa si-> s ó no->n\n    switch(opcion){\n        case 's':\n            cout << \"Espera tu resultado.\"<<endl;\n            break;\n        case 'n':\n            cout << \"Dirigete al salon A3.\"<<endl;\n            break;\n        default:\n            cout << \"Ingresaste un valor invalido.\"<<endl;\n            break;\n    }\n    return 0;\n}\n```\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nDiste el examen? (s/n): s \\\\\nEspera tu resultado.\n\\end{tcolorbox}\n```\n\nLo que hace el programa es verificar si el carácter ingresado es `'s'`. En caso de ser así, imprime **\"Espera tu resultado.\"**.\\\nSi el carácter es `'n'`, imprime **\"Dirígete al salón A3.\"**.\\\nY si no es ninguno de los dos, se imprimirá **\"Ingresaste un valor inválido.\"**.\n\nCon tu creatividad, sé que podrás crear programas con más opciones, como por ejemplo, una calculadora que, dada una opción, haga una suma, una resta o cualquier operación que desees.\n\n## Ternario:\n\nEl operador ternario es parecido al **if-else**, pero de manera resumida. Tiene esta estructura:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    (condicion) ? accion(si es verdadera) : acción si es falsa;\n    return 0;\n}\n```\n\nSi la condición es verdadera, se ejecuta el código que está después de **`?`**.\\\nSi la condición es falsa, se ejecuta el código que está después de **`:`**.\n\nEjemplo:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int a=5, b=6;\n    int resultado; \n    resultado = (a>b) ? a:b;\n    cout << \"El numero mayor es: \" << resultado<<endl;\n    return 0;\n}\n```\n\nPrimeramente, declaramos 3 variables enteras como se muestra. Ojo, el operador ternario retorna un valor de acuerdo a sus parámetros, que en este caso son **a** y **b**.\n\nPrimeramente compara los valores de la siguiente manera: `(a > b)?` — esta operación es como `5 > 6`, esta condición es falsa, por lo que retorna el código que está del lado derecho de `:` que es la **b**, dando como resultado:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nEl numero mayor es: 6\n\\end{tcolorbox}\n```\n\nPuedes probrar de diferente manera, como en este otro ejemplo:\n\n``` cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 10, b = 20;\n    string resultado;\n    // Operador ternario\n    resultado = (a > b) ? \"Mayor.\" : \"Menor o igual.\";\n    cout << resultado << endl;\n    return 0;\n}\n```\n\nEn este caso retornamos una cadena de caracteres y, como sabemos, para poder guardar cadenas usamos la palabra reservada **string** seguida del nombre de la variable.\n\nComo vemos en la salida, dará **Menor o igual**, porque el valor de **a** es menor que el valor de la variable **b**.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nMenor o igual.\n\\end{tcolorbox}\n```\n\nPuedes hacer una serie de ejercicios para tener más familiarización con las estructuras de control, para poder así desarrollar tu lógica de programación.\n","srcMarkdownNoYaml":"\n\n## if-else\n\nUna breve explicación sobre este tema es que cuando la condición dentro de un **if** sea verdadera, se ejecuta una parte del código. En cambio, si la condición es falsa, se ejecuta el código dentro de **else**.\n\nLa estructura principal es la siguiente:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    if(condición){\n        acción  // solo entrara en esta parte del código se la condición es verdadera\n    }\n    else{\n        acción // Este código se ejecuta si la afirmación es falsa\n    }\n    return 0;\n}\n```\n\nUn ejemplo básico para entender aún más la condicional **if-else**.\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    if(3>4){\n        cout << \"3 es mayor que 4.\"<<endl;\n    }\n    else{\n        cout << \"4 es mayor que 3.\"<< endl;\n    }\n    return 0;\n}\n```\n\nEn este ejemplo vemos que la afirmación de **3 \\> 4** es falsa, por lo que se ejecuta el código que está dentro de **else**, como se muestra a continuación.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n4 es mayor que 3.\n\\end{tcolorbox}\n```\n\nUn ejercicio muy práctico es comprobar si un número es par o impar. En este código utilizaremos el operador **mod** (%) y el código quedará de la siguiente manera:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int numero;\n    cout << \"Digite un numero entero: \";\n    cin >> numero;\n    if((numero % 2) == 0){\n        cout << \"El numero es par.\"<<endl;\n    }\n    else{\n        cout << \"El numero es impar.\"<<endl;\n    }\n    return 0;\n}\n```\n\nEn este ejercicio solicitamos al usuario que ingrese un número entero, el cual almacenamos en una variable de tipo entero llamada **numero**.\n\nLa lógica del programa se basa en la operación módulo (`%`), que calcula el **residuo** de una división:\n\n``` mermaid\nflowchart LR\n  A[\"Solicitar número (numero = entrada)\"] --> B[numero = 4]\n  B --> C{\"numero % 2 == 0?\"}\n  C -->|Verdadero| D[Mostrar \"El número es par\"]\n  C -->|Falso| E[Mostrar \"El número es impar\"]\n```\n\nPara mayor entendimiento, veamos el ejemplo de **4 % 2**, cuyo resultado es **0**, por lo que la afirmación queda así: **0 == 0**, la cual es verdadera, e imprimirá el fragmento de código que está dentro del **if**.\n\nEn cambio, si la entrada fuera 5, el cálculo sería: **(5 % 2) == 0** → **1 == 0**, que es falso, por lo que se ejecutará el código dentro del **else**.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nDigite un numero entero: 4 \\\\\nEl numero es par.\n\\end{tcolorbox}\n```\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nDigite un numero entero: 5 \\\\\nEl numero es impar.\n\\end{tcolorbox}\n```\n\n## switch-case:\n\nDe una manera fácil de entender, esta estructura verifica una serie de posibles valores. Es decir, el usuario ingresa un dato y ese dato se compara con diferentes valores.\n\nLa estructura es la siguiente:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    switch(valor){\n        case dato1: // si el valor es igual a dato1 ejecuta la acción.\n            acción\n            break; /* una vez realizada la accion la palabra reservada \"break\" ara \n                      salir de la sentencia switch*/\n        case dato2:\n            acción\n            break;\n        case dato3:\n            acción\n            break;\n        default:    // si ninguno de los opciones se cumple se ejecuta la accion \n            accion\n            break;\n    }\n    return 0;\n}\n```\n\nComo se ve, es fácil de entender. Un ejemplo práctico será realizar un programa que, dado un valor de entrada, indique si una persona tiene que presentar un examen, no tiene que presentarlo o que ingrese un valor válido.\n\nEl programa quedaría así:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    char opcion; // la opción solo podrá contener un string 'a', 'b', etc;\n    cout << \"Diste el examen? (s/n): \"; \n    cin >> opcion; // solo podras ingresa si-> s ó no->n\n    switch(opcion){\n        case 's':\n            cout << \"Espera tu resultado.\"<<endl;\n            break;\n        case 'n':\n            cout << \"Dirigete al salon A3.\"<<endl;\n            break;\n        default:\n            cout << \"Ingresaste un valor invalido.\"<<endl;\n            break;\n    }\n    return 0;\n}\n```\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nDiste el examen? (s/n): s \\\\\nEspera tu resultado.\n\\end{tcolorbox}\n```\n\nLo que hace el programa es verificar si el carácter ingresado es `'s'`. En caso de ser así, imprime **\"Espera tu resultado.\"**.\\\nSi el carácter es `'n'`, imprime **\"Dirígete al salón A3.\"**.\\\nY si no es ninguno de los dos, se imprimirá **\"Ingresaste un valor inválido.\"**.\n\nCon tu creatividad, sé que podrás crear programas con más opciones, como por ejemplo, una calculadora que, dada una opción, haga una suma, una resta o cualquier operación que desees.\n\n## Ternario:\n\nEl operador ternario es parecido al **if-else**, pero de manera resumida. Tiene esta estructura:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    (condicion) ? accion(si es verdadera) : acción si es falsa;\n    return 0;\n}\n```\n\nSi la condición es verdadera, se ejecuta el código que está después de **`?`**.\\\nSi la condición es falsa, se ejecuta el código que está después de **`:`**.\n\nEjemplo:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int a=5, b=6;\n    int resultado; \n    resultado = (a>b) ? a:b;\n    cout << \"El numero mayor es: \" << resultado<<endl;\n    return 0;\n}\n```\n\nPrimeramente, declaramos 3 variables enteras como se muestra. Ojo, el operador ternario retorna un valor de acuerdo a sus parámetros, que en este caso son **a** y **b**.\n\nPrimeramente compara los valores de la siguiente manera: `(a > b)?` — esta operación es como `5 > 6`, esta condición es falsa, por lo que retorna el código que está del lado derecho de `:` que es la **b**, dando como resultado:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nEl numero mayor es: 6\n\\end{tcolorbox}\n```\n\nPuedes probrar de diferente manera, como en este otro ejemplo:\n\n``` cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 10, b = 20;\n    string resultado;\n    // Operador ternario\n    resultado = (a > b) ? \"Mayor.\" : \"Menor o igual.\";\n    cout << resultado << endl;\n    return 0;\n}\n```\n\nEn este caso retornamos una cadena de caracteres y, como sabemos, para poder guardar cadenas usamos la palabra reservada **string** seguida del nombre de la variable.\n\nComo vemos en la salida, dará **Menor o igual**, porque el valor de **a** es menor que el valor de la variable **b**.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nMenor o igual.\n\\end{tcolorbox}\n```\n\nPuedes hacer una serie de ejercicios para tener más familiarización con las estructuras de control, para poder así desarrollar tu lógica de programación.\n"},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":["preambulo.tex"],"output-file":"capitulo4.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"papersize":"a4","fontsize":"11pt","linestretch":1.3,"margin-left":"2cm","margin-right":"2cm","margin-top":"2cm","margin-bottom":"2cm","code-block-bg":true,"code-block-border-left":"#3C3C3C","code-block-font-size":"90%","title":"Estructuras de Control","author":"Alex Dannis Lipa Quispe"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["pdf"]}