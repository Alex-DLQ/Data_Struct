{"title":"Bucles o Ciclos","markdown":{"yaml":{"title":"Bucles o Ciclos","author":"Alex Dannis Lipa Quispe"},"headingText":"for:","containsRefs":false,"markdown":"\n\nLos **bucles** son una forma eficiente de repetir una serie de instrucciones sin tener que escribirlas múltiples veces.\n\nUn ejemplo básico sería imprimir cinco veces el mensaje **\"Hola mundo\"**.\n\nEn este ejercicio, aprenderemos a hacerlo utilizando los diferentes tipos de **bucles o ciclos** que ofrece C++.\n\n\nEl bucle **for** tiene 3 parámetros, los cuales son:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nfor(asignació; condición; iteración){ \n    acción se la condición es verdadera; \n}\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nLa tarea que pusimos al inicio la vamos a resolver, quedará de la siguiente manera:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n  // La asignación si se puede hacer dentro del bucle\n    for(int i=0; i<5; i++){ \n        cout<< \"Hola mundo.\"<<endl;\n    }\n    return 0;\n}\n```\n\nLo que hace el código es recorrer desde 0 hasta 4. ¿Por qué desde cero? Porque asignamos el valor de 0 al inicio → **int i = 0;**\\\n¿Por qué hasta 4? Porque una vez que **i** llegue a 5, la condición **i \\< 5** será falsa y saldrá del bucle.\\\n¿Qué hace el **i++**? Lo que hace es incrementar **i** en 1 en cada iteración, es decir, **i** irá sumando **+1** hasta que la condición sea falsa.\\\nEl código tendrá la siguiente salida:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nHola mundo. \nHola mundo. \nHola mundo. \nHola mundo. \nHola mundo.\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\n## while:\n\nEste bucle, al igual que el **for**, primero compara su condición; si es verdadera, se ejecuta el código, y si no, se salta. Sus partes son:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nWhile(condición){ \n    acción a realizar si la condición es verdadera;     \n}\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nEn esta parte tienes que tener cuidado porque si tienes un mínimo margen de error, el bucle se ejecutará infinitamente. Vamos a realizar el ejercicio anterior de igual manera que la anterior:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int i=0;\n    while(i<5){\n        cout << \"Hola mundo.\"<<endl;\n        i++; // esta parte es crucial ya que sin ella se crearía un bucle infinito\n    }\n    return 0;\n}\n```\n\n¿Qué es lo que está pasando? Primeramente declaramos una variable de tipo entero llamada **i** que tiene como valor **0**. La condición que se toma en cuenta es esta -\\> **(i \\< 5)**, ya sabemos que es verdadera y pasará a ejecutarse el código. Esta parte del código es fundamental -\\> **i++**. ¿Por qué? Porque sin ella, el valor de **i** seguirá siendo **0** y así hasta el infinito y más allá.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo.\n\\end{tcolorbox}\n```\n\n## do-while:\n\nEl bucle **do-while** lo que hace primeramente es ejecutar la acción y luego verificar la condición. Sus partes son las siguientes:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\ndo{ \n    acción \n}While(condición);\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nComo ves, primeramente ejecuta una acción y luego compara la condición. Bueno, vamos a realizar la tarea:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int i = 0;\n    do{\n        cout << \"Hola mundo.\"<<endl;\n        i++; // sin esto el buclue se hace infinitamente\n    }while(i<5);\n    return 0;\n}\n```\n\nPrimeramente se ejecuta el código y recién se evalúa la condición. Esto es muy útil si quieres asegurarte al menos una ejecución en tu código. La salida es:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo.\n\\end{tcolorbox}\n```\n\nComo viste, en la mayoría de los casos los bucles funcionan con inicializaciones y condiciones que controlan su ejecución, pero no siempre es así. A veces, un bucle puede detenerse o saltar iteraciones según ciertas condiciones específicas, por ejemplo, basándose en un carácter o valor determinado.\n\nSi te quedó la duda, te invito a ver estos videos que te ayudarán a entender mejor los tres tipos de bucles (`for`, `while`, `do-while`). En los videos también se explican dos palabras reservadas muy importantes que se usan dentro de los bucles: **break** y **continue**.\n\n-   **break**: Esta palabra reservada se utiliza para detener por completo la ejecución de un bucle, sin importar si la condición principal sigue siendo verdadera. Cuando el programa encuentra un `break` dentro de un bucle, sale inmediatamente del mismo y continúa con la siguiente instrucción después del bucle.\n\n-   **continue**: Esta palabra reservada se usa para saltar la iteración actual del bucle y continuar con la siguiente. Es decir, cuando se ejecuta un `continue`, el código que queda dentro del bucle para esa iteración se omite y se pasa a evaluar la condición para la siguiente iteración.\n\nAmbas instrucciones son muy útiles para controlar el flujo dentro de los bucles de forma precisa, haciendo que el código sea más flexible y eficiente.\n\nTe recomiendo prestar atención a cómo se usan en los ejemplos para que comprendas bien su funcionamiento.\n","srcMarkdownNoYaml":"\n\nLos **bucles** son una forma eficiente de repetir una serie de instrucciones sin tener que escribirlas múltiples veces.\n\nUn ejemplo básico sería imprimir cinco veces el mensaje **\"Hola mundo\"**.\n\nEn este ejercicio, aprenderemos a hacerlo utilizando los diferentes tipos de **bucles o ciclos** que ofrece C++.\n\n## for:\n\nEl bucle **for** tiene 3 parámetros, los cuales son:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nfor(asignació; condición; iteración){ \n    acción se la condición es verdadera; \n}\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nLa tarea que pusimos al inicio la vamos a resolver, quedará de la siguiente manera:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n  // La asignación si se puede hacer dentro del bucle\n    for(int i=0; i<5; i++){ \n        cout<< \"Hola mundo.\"<<endl;\n    }\n    return 0;\n}\n```\n\nLo que hace el código es recorrer desde 0 hasta 4. ¿Por qué desde cero? Porque asignamos el valor de 0 al inicio → **int i = 0;**\\\n¿Por qué hasta 4? Porque una vez que **i** llegue a 5, la condición **i \\< 5** será falsa y saldrá del bucle.\\\n¿Qué hace el **i++**? Lo que hace es incrementar **i** en 1 en cada iteración, es decir, **i** irá sumando **+1** hasta que la condición sea falsa.\\\nEl código tendrá la siguiente salida:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nHola mundo. \nHola mundo. \nHola mundo. \nHola mundo. \nHola mundo.\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\n## while:\n\nEste bucle, al igual que el **for**, primero compara su condición; si es verdadera, se ejecuta el código, y si no, se salta. Sus partes son:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nWhile(condición){ \n    acción a realizar si la condición es verdadera;     \n}\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nEn esta parte tienes que tener cuidado porque si tienes un mínimo margen de error, el bucle se ejecutará infinitamente. Vamos a realizar el ejercicio anterior de igual manera que la anterior:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int i=0;\n    while(i<5){\n        cout << \"Hola mundo.\"<<endl;\n        i++; // esta parte es crucial ya que sin ella se crearía un bucle infinito\n    }\n    return 0;\n}\n```\n\n¿Qué es lo que está pasando? Primeramente declaramos una variable de tipo entero llamada **i** que tiene como valor **0**. La condición que se toma en cuenta es esta -\\> **(i \\< 5)**, ya sabemos que es verdadera y pasará a ejecutarse el código. Esta parte del código es fundamental -\\> **i++**. ¿Por qué? Porque sin ella, el valor de **i** seguirá siendo **0** y así hasta el infinito y más allá.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo.\n\\end{tcolorbox}\n```\n\n## do-while:\n\nEl bucle **do-while** lo que hace primeramente es ejecutar la acción y luego verificar la condición. Sus partes son las siguientes:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\ndo{ \n    acción \n}While(condición);\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nComo ves, primeramente ejecuta una acción y luego compara la condición. Bueno, vamos a realizar la tarea:\n\n``` cpp\n#include <iostream>\nusing namespace std;\nint main(){\n    int i = 0;\n    do{\n        cout << \"Hola mundo.\"<<endl;\n        i++; // sin esto el buclue se hace infinitamente\n    }while(i<5);\n    return 0;\n}\n```\n\nPrimeramente se ejecuta el código y recién se evalúa la condición. Esto es muy útil si quieres asegurarte al menos una ejecución en tu código. La salida es:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo. \\\\\nHola mundo.\n\\end{tcolorbox}\n```\n\nComo viste, en la mayoría de los casos los bucles funcionan con inicializaciones y condiciones que controlan su ejecución, pero no siempre es así. A veces, un bucle puede detenerse o saltar iteraciones según ciertas condiciones específicas, por ejemplo, basándose en un carácter o valor determinado.\n\nSi te quedó la duda, te invito a ver estos videos que te ayudarán a entender mejor los tres tipos de bucles (`for`, `while`, `do-while`). En los videos también se explican dos palabras reservadas muy importantes que se usan dentro de los bucles: **break** y **continue**.\n\n-   **break**: Esta palabra reservada se utiliza para detener por completo la ejecución de un bucle, sin importar si la condición principal sigue siendo verdadera. Cuando el programa encuentra un `break` dentro de un bucle, sale inmediatamente del mismo y continúa con la siguiente instrucción después del bucle.\n\n-   **continue**: Esta palabra reservada se usa para saltar la iteración actual del bucle y continuar con la siguiente. Es decir, cuando se ejecuta un `continue`, el código que queda dentro del bucle para esa iteración se omite y se pasa a evaluar la condición para la siguiente iteración.\n\nAmbas instrucciones son muy útiles para controlar el flujo dentro de los bucles de forma precisa, haciendo que el código sea más flexible y eficiente.\n\nTe recomiendo prestar atención a cómo se usan en los ejemplos para que comprendas bien su funcionamiento.\n"},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":["preambulo.tex"],"output-file":"capitulo5.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"papersize":"a4","fontsize":"11pt","linestretch":1.3,"margin-left":"2cm","margin-right":"2cm","margin-top":"2cm","margin-bottom":"2cm","code-block-bg":true,"code-block-border-left":"#3C3C3C","code-block-font-size":"90%","title":"Bucles o Ciclos","author":"Alex Dannis Lipa Quispe"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["pdf"]}