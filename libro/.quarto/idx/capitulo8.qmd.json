{"title":"Estructuras","markdown":{"yaml":{"title":"Estructuras","author":"Alex Dannis Lipa Quispe"},"headingText":"Definición de estructura:","containsRefs":false,"markdown":"\n\nLas estructuras o struct en C++ son una forma de definir un tipo de dato personalizado que puede contener varios elementos de diferentes tipos. Una estructura es similar a una clase, pero se utiliza principalmente para almacenar datos y no para definir comportamientos.\n\n\nPara definir una estructura en c++, se utiliza la palabra reservada `struct` seguida del nombre de la estructura y los elementos que la componen.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nstruct Persona{\n    string nombre;\n    int edad;\n    string direccion;\n};\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\n**Uso de una estructura:** Una vez definida la estructura, puedes crear variables de este tipo y acceder a sus parámetros.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\n  Persona persona; //creamos una variables de la estructura \"Persona\"\n  persona.nombre = \"juan\";\n  persona.edad = 15;\n  persona.direccion = \"calle 13\";\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nPara acceder a las varibales de la estructura primeramente se pone las variables que definimos anteriormente seguida de un punto y en que valor de la estructura la deseamos guardar, tal y cual esta en el ejemplo de arriba. **Ventajas de las estructuras:** Las estructuras son útiles cuando necesitas almacenar varios datos relacionados en una sola unidad. Algunas ventajas de las estructuras son:\n\n-   Permiten organizar y estructurar los datos de manera lógica.\n\n-   Facilitan el acceso y la manipulación de los datos.\n\n-   Pueden ser utilizados como parámetros de funciones o como valores de retorno. Completemos el programa, pero ahora que el usuario completo los direferentes campos.\n\n``` cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nstruct Persona{\n    string nombre;\n    int edad;\n    string direccion;\n}persona; // la variable lo podemos colocar aqui.\nint main(){\n    cout << \"Digite su nombre: \";\n    getline(cin, persona.nombre);\n    cout << \"Digite su edad: \";\n    cin >> persona.edad;\n    fflush(stdin); // lo usamos para vaciar el buffer.\n    cout << \"Digite su direccion: \";\n    getline(cin, persona.direccion);\n    cout<<\"\\nMostrando los datos de la persona.\"<<endl;\n    cout << \"El nombre es \"<<persona.nombre<<endl;\n    cout << \"La edad es \"<<persona.edad<<endl;\n    cout << \"La direccion es \"<<persona.direccion<<endl;\n    return 0;\n}\n```\n\nEn este caso guardamos y mostramos los datos que el usuario nos digita, el resultado nos quedaría de la siguiente manera:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nDigite su nombre: alex\nDigite su edad: 15\nDigite su direccion: calle 13\n\nMostrando los datos de la persona.\nEl nombre es alex\nLa edad es 15\nLa direccion es calle 13\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\n## Estructuras anidadas:\n\nLas estructuras anidadas en C++ se refieren a la capacidad de definir una estructura dentro de otra estructura. Esto permite crear estructuras más complejas y jerárquicas, donde una estructura puede contener otra estructura como uno de sus miembros. **Ejemplo de estructura anidada**\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nstruct Direccion{\n    string calle;\n    string ciudad;\n    string pais;\n};\nstruct Persona{\n    string nombre;\n    int edad;\n    Direccion direccion;\n}persona; //declaramos la variable.\n\\end{verbatim}\n\\end{tcolorbox}\n```\nEn este ejemplo, la estructura `Persona` contiene esa estructura `Direccion` como uno de sus miembros. Puedes acceder a los miembros de la estructura anidada utilizando el operador de punto `(.)`. **ventajas de las estructuras anidadas** Las estructuras anidadas son útiles cuando necesitas representar datos complejos y jerárquicos. Algunas ventajas de las estructuras anidadas son: - Permiten crear estructuras de datos más complejas y realistas. - Facilitan la organización y el acceso a los datos. - Pueden mejorar la legibilidad y la mantenibilidad del código. **Aplicaciones de las estructuras anidadas** Las estructuras anidadas se pueden utilizar en una variedad de aplicaciones, como:\n\n-   Representar datos de personas, como direcciones y contactos.\n-   Modelar estructuras de datos complejas, como árboles o grafos.\n-   Crear estructuras de datos para juegos o simulaciones.\n\nVamos a completar el código e igualmente pediremos al usuario que lo rellene:\n\n``` cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nstruct Direccion{\n    string calle;\n    string ciudad;\n    string pais;\n};\nstruct Persona{\n    string nombre;\n    Direccion direccion; //con estos parámetros designamos a la\n                          //estructura anidada\n    int edad;\n}persona;\nint main(){\n    cout << \"Digite su nombre: \";\n    getline(cin, persona.nombre);\n    cout << \"Digite su calle: \";\n    getline(cin, persona.direccion.calle);\n    cout << \"Digite su ciudad: \";\n    getline(cin, persona.direccion.ciudad);\n    cout << \"Digite su pais: \";\n    getline(cin, persona.direccion.pais);\n    cout << \"Digite su edad: \";\n    cin >> persona.edad;\n    cout<<\"\\nMostrando los datos de la persona\\n\";\n    cout << \"Nombre \"<<persona.nombre<<endl;\n    cout << \"Calle \" <<persona.direccion.calle<<endl;\n    cout << \"Ciudad \"<<persona.direccion.ciudad<<endl;\n    cout << \"Pais \" <<persona.direccion.pais<<endl;\n    cout << \"Edad \" <<persona.edad<<endl;\n}\n```\n\nLo que hicimos es completar el ejemplo que pusimos en el inicio. La salida estandar nos quedaría de esta manera:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nDigite su nombre: alex\nDigite su calle: calle 13\nDigite su ciudad: puno\nDigite su pais: peru\nDigite su edad: 15\n\nMostrando los datos de la persona\nNombre alex\nCalle calle 13\nCiudad puno\nPais peru\nEdad 15\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nSi te quedaste con ganas de más te invito a que veas este video donde aremos más ejercicios para que entiendas un poco más -\\>\n","srcMarkdownNoYaml":"\n\nLas estructuras o struct en C++ son una forma de definir un tipo de dato personalizado que puede contener varios elementos de diferentes tipos. Una estructura es similar a una clase, pero se utiliza principalmente para almacenar datos y no para definir comportamientos.\n\n## Definición de estructura:\n\nPara definir una estructura en c++, se utiliza la palabra reservada `struct` seguida del nombre de la estructura y los elementos que la componen.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nstruct Persona{\n    string nombre;\n    int edad;\n    string direccion;\n};\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\n**Uso de una estructura:** Una vez definida la estructura, puedes crear variables de este tipo y acceder a sus parámetros.\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\n  Persona persona; //creamos una variables de la estructura \"Persona\"\n  persona.nombre = \"juan\";\n  persona.edad = 15;\n  persona.direccion = \"calle 13\";\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nPara acceder a las varibales de la estructura primeramente se pone las variables que definimos anteriormente seguida de un punto y en que valor de la estructura la deseamos guardar, tal y cual esta en el ejemplo de arriba. **Ventajas de las estructuras:** Las estructuras son útiles cuando necesitas almacenar varios datos relacionados en una sola unidad. Algunas ventajas de las estructuras son:\n\n-   Permiten organizar y estructurar los datos de manera lógica.\n\n-   Facilitan el acceso y la manipulación de los datos.\n\n-   Pueden ser utilizados como parámetros de funciones o como valores de retorno. Completemos el programa, pero ahora que el usuario completo los direferentes campos.\n\n``` cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nstruct Persona{\n    string nombre;\n    int edad;\n    string direccion;\n}persona; // la variable lo podemos colocar aqui.\nint main(){\n    cout << \"Digite su nombre: \";\n    getline(cin, persona.nombre);\n    cout << \"Digite su edad: \";\n    cin >> persona.edad;\n    fflush(stdin); // lo usamos para vaciar el buffer.\n    cout << \"Digite su direccion: \";\n    getline(cin, persona.direccion);\n    cout<<\"\\nMostrando los datos de la persona.\"<<endl;\n    cout << \"El nombre es \"<<persona.nombre<<endl;\n    cout << \"La edad es \"<<persona.edad<<endl;\n    cout << \"La direccion es \"<<persona.direccion<<endl;\n    return 0;\n}\n```\n\nEn este caso guardamos y mostramos los datos que el usuario nos digita, el resultado nos quedaría de la siguiente manera:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nDigite su nombre: alex\nDigite su edad: 15\nDigite su direccion: calle 13\n\nMostrando los datos de la persona.\nEl nombre es alex\nLa edad es 15\nLa direccion es calle 13\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\n## Estructuras anidadas:\n\nLas estructuras anidadas en C++ se refieren a la capacidad de definir una estructura dentro de otra estructura. Esto permite crear estructuras más complejas y jerárquicas, donde una estructura puede contener otra estructura como uno de sus miembros. **Ejemplo de estructura anidada**\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nstruct Direccion{\n    string calle;\n    string ciudad;\n    string pais;\n};\nstruct Persona{\n    string nombre;\n    int edad;\n    Direccion direccion;\n}persona; //declaramos la variable.\n\\end{verbatim}\n\\end{tcolorbox}\n```\nEn este ejemplo, la estructura `Persona` contiene esa estructura `Direccion` como uno de sus miembros. Puedes acceder a los miembros de la estructura anidada utilizando el operador de punto `(.)`. **ventajas de las estructuras anidadas** Las estructuras anidadas son útiles cuando necesitas representar datos complejos y jerárquicos. Algunas ventajas de las estructuras anidadas son: - Permiten crear estructuras de datos más complejas y realistas. - Facilitan la organización y el acceso a los datos. - Pueden mejorar la legibilidad y la mantenibilidad del código. **Aplicaciones de las estructuras anidadas** Las estructuras anidadas se pueden utilizar en una variedad de aplicaciones, como:\n\n-   Representar datos de personas, como direcciones y contactos.\n-   Modelar estructuras de datos complejas, como árboles o grafos.\n-   Crear estructuras de datos para juegos o simulaciones.\n\nVamos a completar el código e igualmente pediremos al usuario que lo rellene:\n\n``` cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nstruct Direccion{\n    string calle;\n    string ciudad;\n    string pais;\n};\nstruct Persona{\n    string nombre;\n    Direccion direccion; //con estos parámetros designamos a la\n                          //estructura anidada\n    int edad;\n}persona;\nint main(){\n    cout << \"Digite su nombre: \";\n    getline(cin, persona.nombre);\n    cout << \"Digite su calle: \";\n    getline(cin, persona.direccion.calle);\n    cout << \"Digite su ciudad: \";\n    getline(cin, persona.direccion.ciudad);\n    cout << \"Digite su pais: \";\n    getline(cin, persona.direccion.pais);\n    cout << \"Digite su edad: \";\n    cin >> persona.edad;\n    cout<<\"\\nMostrando los datos de la persona\\n\";\n    cout << \"Nombre \"<<persona.nombre<<endl;\n    cout << \"Calle \" <<persona.direccion.calle<<endl;\n    cout << \"Ciudad \"<<persona.direccion.ciudad<<endl;\n    cout << \"Pais \" <<persona.direccion.pais<<endl;\n    cout << \"Edad \" <<persona.edad<<endl;\n}\n```\n\nLo que hicimos es completar el ejemplo que pusimos en el inicio. La salida estandar nos quedaría de esta manera:\n\n```{=latex}\n\\begin{tcolorbox}[custombox]\n\\begin{verbatim}\nDigite su nombre: alex\nDigite su calle: calle 13\nDigite su ciudad: puno\nDigite su pais: peru\nDigite su edad: 15\n\nMostrando los datos de la persona\nNombre alex\nCalle calle 13\nCiudad puno\nPais peru\nEdad 15\n\\end{verbatim}\n\\end{tcolorbox}\n```\n\nSi te quedaste con ganas de más te invito a que veas este video donde aremos más ejercicios para que entiendas un poco más -\\>\n"},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":["preambulo.tex"],"output-file":"capitulo8.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"papersize":"a4","fontsize":"11pt","linestretch":1.3,"margin-left":"2cm","margin-right":"2cm","margin-top":"2cm","margin-bottom":"2cm","code-block-bg":true,"code-block-border-left":"#3C3C3C","code-block-font-size":"90%","title":"Estructuras","author":"Alex Dannis Lipa Quispe"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["pdf"]}