---
title: "Bucles o Ciclos"
author: "Alex Dannis Lipa Quispe"
---

Los **bucles** son una forma eficiente de repetir una serie de instrucciones sin tener que escribirlas múltiples veces.

Un ejemplo básico sería imprimir cinco veces el mensaje **"Hola mundo"**.

En este ejercicio, aprenderemos a hacerlo utilizando los diferentes tipos de **bucles o ciclos** que ofrece C++.

## for:

El bucle **for** tiene 3 parámetros, los cuales son:

```{=latex}
\begin{tcolorbox}[custombox]
\begin{verbatim}
for(asignació; condición; iteración){ 
    acción se la condición es verdadera; 
}
\end{verbatim}
\end{tcolorbox}
```

La tarea que pusimos al inicio la vamos a resolver, quedará de la siguiente manera:

``` cpp
#include <iostream>
using namespace std;
int main(){
  // La asignación si se puede hacer dentro del bucle
    for(int i=0; i<5; i++){ 
        cout<< "Hola mundo."<<endl;
    }
    return 0;
}
```

Lo que hace el código es recorrer desde 0 hasta 4. ¿Por qué desde cero? Porque asignamos el valor de 0 al inicio → **int i = 0;**\
¿Por qué hasta 4? Porque una vez que **i** llegue a 5, la condición **i \< 5** será falsa y saldrá del bucle.\
¿Qué hace el **i++**? Lo que hace es incrementar **i** en 1 en cada iteración, es decir, **i** irá sumando **+1** hasta que la condición sea falsa.\
El código tendrá la siguiente salida:

```{=latex}
\begin{tcolorbox}[custombox]
\begin{verbatim}
Hola mundo. 
Hola mundo. 
Hola mundo. 
Hola mundo. 
Hola mundo.
\end{verbatim}
\end{tcolorbox}
```

## while:

Este bucle, al igual que el **for**, primero compara su condición; si es verdadera, se ejecuta el código, y si no, se salta. Sus partes son:

```{=latex}
\begin{tcolorbox}[custombox]
\begin{verbatim}
While(condición){ 
    acción a realizar si la condición es verdadera;     
}
\end{verbatim}
\end{tcolorbox}
```

En esta parte tienes que tener cuidado porque si tienes un mínimo margen de error, el bucle se ejecutará infinitamente. Vamos a realizar el ejercicio anterior de igual manera que la anterior:

``` cpp
#include <iostream>
using namespace std;
int main(){
    int i=0;
    while(i<5){
        cout << "Hola mundo."<<endl;
        i++; // esta parte es crucial ya que sin ella se crearía un bucle infinito
    }
    return 0;
}
```

¿Qué es lo que está pasando? Primeramente declaramos una variable de tipo entero llamada **i** que tiene como valor **0**. La condición que se toma en cuenta es esta -\> **(i \< 5)**, ya sabemos que es verdadera y pasará a ejecutarse el código. Esta parte del código es fundamental -\> **i++**. ¿Por qué? Porque sin ella, el valor de **i** seguirá siendo **0** y así hasta el infinito y más allá.

```{=latex}
\begin{tcolorbox}[custombox]
Hola mundo. \\
Hola mundo. \\
Hola mundo. \\
Hola mundo. \\
Hola mundo.
\end{tcolorbox}
```

## do-while:

El bucle **do-while** lo que hace primeramente es ejecutar la acción y luego verificar la condición. Sus partes son las siguientes:

```{=latex}
\begin{tcolorbox}[custombox]
\begin{verbatim}
do{ 
    acción 
}While(condición);
\end{verbatim}
\end{tcolorbox}
```

Como ves, primeramente ejecuta una acción y luego compara la condición. Bueno, vamos a realizar la tarea:

``` cpp
#include <iostream>
using namespace std;
int main(){
    int i = 0;
    do{
        cout << "Hola mundo."<<endl;
        i++; // sin esto el buclue se hace infinitamente
    }while(i<5);
    return 0;
}
```

Primeramente se ejecuta el código y recién se evalúa la condición. Esto es muy útil si quieres asegurarte al menos una ejecución en tu código. La salida es:

```{=latex}
\begin{tcolorbox}[custombox]
Hola mundo. \\
Hola mundo. \\
Hola mundo. \\
Hola mundo. \\
Hola mundo.
\end{tcolorbox}
```

Como viste, en la mayoría de los casos los bucles funcionan con inicializaciones y condiciones que controlan su ejecución, pero no siempre es así. A veces, un bucle puede detenerse o saltar iteraciones según ciertas condiciones específicas, por ejemplo, basándose en un carácter o valor determinado.

Si te quedó la duda, te invito a ver estos videos que te ayudarán a entender mejor los tres tipos de bucles (`for`, `while`, `do-while`). En los videos también se explican dos palabras reservadas muy importantes que se usan dentro de los bucles: **break** y **continue**.

-   **break**: Esta palabra reservada se utiliza para detener por completo la ejecución de un bucle, sin importar si la condición principal sigue siendo verdadera. Cuando el programa encuentra un `break` dentro de un bucle, sale inmediatamente del mismo y continúa con la siguiente instrucción después del bucle.

-   **continue**: Esta palabra reservada se usa para saltar la iteración actual del bucle y continuar con la siguiente. Es decir, cuando se ejecuta un `continue`, el código que queda dentro del bucle para esa iteración se omite y se pasa a evaluar la condición para la siguiente iteración.

Ambas instrucciones son muy útiles para controlar el flujo dentro de los bucles de forma precisa, haciendo que el código sea más flexible y eficiente.

Te recomiendo prestar atención a cómo se usan en los ejemplos para que comprendas bien su funcionamiento.
