---
title: "Cadenas de Texto"
author: "Alex Dannis Lipa Quispe"
---

## char\[n\]:

Una forma común de almacenar cadenas de texto en C++ es usando un arreglo (vector) de tipo `char`. Es un método bastante eficiente, aunque limitado, ideal para programas que no requieren manejar textos muy largos en las entradas. Se declara y usa de la siguiente manera:

``` cpp
#include <iostream>
using namespace std;
int main(){
    char nombre[100]; //cuardamos memoría para 100 carácteres
    cout << "Digite su nombre: ";
    cin.getline(nombre,100,'\n');
    cout << "Su nombre guardado es: "<<nombre<<endl;
    return 0;
}
```

En este caso, para guardar cadenas de texto utilizamos `cin.getline()`, que recibe tres parámetros:

-   En el primero, indicamos **dónde queremos guardar** la cadena (en este ejemplo, en la variable nombre).
-   En el segundo, especificamos **cuántos espacios reservamos** para almacenar la cadena (la cantidad que definimos al inicio).\
-   Y en el tercero, indicamos cuándo debe **terminar la lectura**, que normalmente es un salto de línea \texttt{`\textbackslash n`} (es decir, cuando presionamos la tecla **Enter**, se guarda la cadena hasta ese momento). **Ejemplo de uso y compilación:**

```{=latex}
\begin{tcolorbox}[custombox]
\begin{verbatim}
Digite su nombre: Maria Gonzales Perez
Su nombre guardado es: Maria Gonzales Perez
\end{verbatim}
\end{tcolorbox}
```

Algunas carácteristicas especiales que puedes usar son las siguientes. Para que algunas de estas funciones correctamente es necesario incluir la librería **#include\<cstdlib\>** (donde `var` es una variables):

Funciones clásicas de manejo de `char[]` (cstring)

> Estas funciones trabajan con arreglos de caracteres (`char[]`), no con objetos `string`. Se requiere incluir la cabecera `#include <cstring>` y en algunos casos `#include <cstdlib>`.

| **Método** | **¿Para qué sirve?** | **Ejemplo** | **Resultado** |
|----|----|----|----|
| `strlen(var)` | Obtener la longitud de una cadena | `int num = strlen("alex");` | `num = 4` |
| `strcpy(dest, src)` | Copiar el contenido de una cadena en otra | `strcpy(var1, "Alex");` | `var1 = "Alex"` |
| `strcmp(a, b)` | Comparar dos cadenas | `strcmp("hola", "hola") == 0` | `true` si son iguales |
| `strcat(a, b)` | Concatenar dos cadenas | `strcat(var1, "Alex");` | Si `var1 = "Hola "`, entonces `"Hola Alex"` |
| `strrev(var)` | Invertir una cadena | `char r[10] = strrev(var1);` | Si `var1 = "dia"`, entonces `"aid"` |
| `strupr(var)` | Convertir a mayúsculas | `strupr(var1);` | Si `var1 = "paz"`, será `"PAZ"` |
| `strlwr(var)` | Convertir a minúsculas | `strlwr(var1);` | Si `var1 = "PAZ"`, será `"paz"` |
| `strncmp(a, b, n)` | Comparar los primeros `n` caracteres de dos cadenas | `strncmp("alex", "a", 1) == 0` | `true` porque `'a' == 'a'` |
| `atoi(var)` | Convertir texto a entero | `int num = atoi("2");` | `num = 2` |
| `atof(var)` | Convertir texto a número con decimales | `float num = atof("2.3");` | `num = 2.3` |

> ⚠️ Nota: `strrev`, `strupr` y `strlwr` no son funciones estándar en C++, pero funcionan en algunos compiladores como **Dev-C++**.

Hagamos un ejercico simple que será, verificar si una palabra tiene la `a` minuscula en su nombre:

``` cpp
#include <iostream>
#include <cstring> // lo utilizamos para usar strlen()
using namespace std;
int main(){
    char nombre[20];
    bool bandera = false;
    int cantidad = 0;
    cout << "Digite su nombre: ";
    cin.getline(nombre, 20, '\n');
    cantidad = strlen(nombre);
    for(int i=0; i<cantidad; i++){
        if(nombre[i] == 'a'){
            bandera = true;
            break;
        }
    }
    if(bandera){
        cout << "Su nombre contiene almenos una a."<<endl;
    }else{
        cout << "Su nombre no contiene la vocal a."<<endl;
    }
    return 0;
}
```

Este programa verifica si al menos tu nombre contiene una **a**. Usamos 3 variables de diferentes tipos que son: **`char[20]`** para almacenar un nombre de máximo 20 caracteres, **`bool`** para verificar si hay al menos una **a** en el nombre y un **`int`** para saber exactamente cuántos caracteres tiene el nombre introducido.

La compilación del programa será de esta manera:

```{=latex}
\begin{tcolorbox}[custombox]
\begin{verbatim}
Digite su nombre: alex
Su nombre contiene almenos una a.
\end{verbatim}
\end{tcolorbox}
```

## string

Otra manera de guardar cadenas de texto es usar los **`string`**, que es una forma más fácil de almacenar palabras y se entiende mejor.

Aquí te muestro un ejemplo:

``` cpp
#include <iostream>
#include <string>  //Agregamos esta librería para poder usar las strings
using namespace std;
int main(){
    string nombre;
    cout << "Digite su nombre: ";
    getline(cin, nombre); // de esta manera es como se guarda los strings
    cout << "Su nombre guardado es: "<<nombre<<endl;
    return 0;
}
```

Para guardar los **string** se usa la función reservada **getline()**, que en este caso utiliza dos parámetros.

Para saber qué poner en el primer parámetro, nos preguntamos: ¿Qué queremos hacer?\
En este caso, queremos **guardar** y por ello ponemos **`cin`**.

En el segundo parámetro, va: ¿Dónde lo quieres guardar?\
Por esa razón, colocamos el nombre de la variable de tipo **string**.

Algunas características básicas de los **string** son estas:

Métodos comunes de `string` en C++

| MÉTODO | ¿Para qué sirve? | Ejemplo | Resultado |
|----|----|----|----|
| `.empty()` | Verifica si la cadena está vacía | `string s = ""; s.empty();` | `true` |
| `.length()` | Devuelve el número de caracteres de la cadena | `string s = "Hola"; s.length();` | `4` |
| `.size()` | Igual que `.length()` | `s.size();` | `4` |
| `.substr(pos, n)` | Devuelve una subcadena desde `pos` con `n` caracteres | `s.substr(1, 2);` | `"ol"` |
| `.find()` | Devuelve la posición de una subcadena o carácter | `s.find("la");` | `2` |
| `.append(str)` | Añade `str` al final de la cadena | `s.append(" mundo");` | `"Hola mundo"` |
| `.insert(pos, s)` | Inserta una subcadena `s` en la posición `pos` | `s.insert(2, "xx");` | `"Hoxxla"` |
| `.erase(pos, n)` | Elimina `n` caracteres desde la posición `pos` | `s.erase(1, 2);` | `"Ha"` (de "Hola") |
| `.replace(pos,n,s)` | Reemplaza `n` caracteres desde `pos` por `s` | `s.replace(0, 4, "Hi");` | `"Hi"` |
| `toupper(c)` | Convierte un carácter a mayúscula | `toupper('a');` | `'A'` |
| `tolower(c)` | Convierte un carácter a minúscula | `tolower('A');` | `'a'` |
| `isalnum(c)` | Verifica si un carácter es alfanumérico | `isalnum('3');` | `true` |
| `isalpha(c)` | Verifica si un carácter es una letra | `isalpha('A');` | `true` |
| `isdigit(c)` | Verifica si un carácter es un dígito | `isdigit('8');` | `true` |

> **Nota:** funciones como `toupper()`, `isdigit()`, etc., requieren incluir la librería `#include <cctype>`.

Como modo de práctica, hagamos un programa que verifique si la primera y última palabra inician con un mismo carácter.

Si es así, que imprima **"hola mundo"**, y si no, muestre **"buenas noches"**.

``` cpp
#include <iostream>
#include <cctype> // para usar isalpha()
#include <cstring>
using namespace std;
int main(){
    string palabra;
    int tam = 0;
    cout << "Digite una palabra: ";
    getline(cin, palabra);
    tam = palabra.length();
    if(isalpha(palabra[0]) && isalpha(palabra[tam-1])){
        cout << "hola mundo."<<endl;
    }else{
        cout << "buenas noches."<<endl;
    }
    return 0;
}
```

En este programa lo que hicimos es verificar si una palabra empieza y termina con un mismo carácter.

Como en los vectores, las `string` tienen índices que empiezan en 0. Por esa razón, en la estructura de control **if** usamos `palabra[0]` y `palabra[tam-1]`.

Si la palabra es **casa**, lo que la condicional verificaría sería: `c` y `a`.

¿Son iguales? No, por eso el resultado sería **false** y el programa imprimiría "buenas noches".

En cambio, si la palabra fuera, por ejemplo, **alba**, la comparación sería entre `a` y `a`, dando **true** y el programa imprimiría "hola mundo".

Aquí te muestro un ejemplo de compilación:

```{=latex}
\begin{tcolorbox}[custombox]
\begin{verbatim}
Digite una palabra: casa
hola mundo.
---> caso contrario <---
Digite una palabra: casa7
buenas noches.
\end{verbatim}
\end{tcolorbox}
```
